#########SOMETHING TO NOTE:
#all of these twitter files are tweets that have affective demonstratives in them. We have NO control or sample to compare it to.
#I HAVE a general population control (kind of) but it includes ALL tweets, not just ones with affective demonstratives. SO.
#when we write the paper we need to make sure we specify that our text is tweets with affective demonstratives, that have been picked out by hand.






import nltk
from nltk.corpus import opinion_lexicon
poswords = set(opinion_lexicon.words("positive-words.txt"))
negwords = set(opinion_lexicon.words("negative-words.txt"))






#PaulRyan:

f=open("paulryan.txt", "rU").readlines()
#opens the file and reads by line

def finddemons(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg

paulryancounter = 0   
for line in f:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(paulryancounter) #to check it works
    addme = finddemons(token)
    paulryancounter += addme
    print(paulryancounter) #to check it works
    print(token)
    
    
    
    
    
    
#Pence:
    
f2=open("pence.txt", "rU").readlines()

def finddemons2(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
pencecounter = 0   
for line in f2:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(pencecounter)
    addme = finddemons2(token)
    pencecounter += addme
    print(pencecounter)
    print(token)
    
    
    
    
    
    
    
#TrumpPersonal:

f3=open("trump.txt", "rU").readlines()

def finddemons3(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
trumpcounter = 0   
for line in f3:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(trumpcounter)
    addme = finddemons3(token)
    trumpcounter += addme
    print(trumpcounter)
    print(token)
    
    
    
    
    
 
    
    
    
#SarahPalin:

f4=open("palin.txt", "rU").readlines()

def finddemons4(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
palincounter = 0   
for line in f4:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(palincounter)
    addme = finddemons4(token)
    palincounter += addme
    print(palincounter)
    print(token)
    
    
    
    
    
    
    
    
    
    
#BenCarson:

f5=open("carson.txt", "rU").readlines()

def finddemons5(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
carsoncounter = 0   
for line in f5:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(carsoncounter)
    addme = finddemons5(token)
    carsoncounter += addme
    print(carsoncounter)
    print(token)
    
    
    
    
    
    
#Ivanka:

f6=open("ivanka.txt", "rU").readlines()

def finddemons6(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
ivankacounter = 0   
for line in f6:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(ivankacounter)
    addme = finddemons6(token)
    ivankacounter += addme
    print(ivankacounter)
    print(token)
    
    
    
    
    
    
    
    
#JohnMcCain:

f7=open("mccain.txt", "rU").readlines()

def finddemons7(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
mccaincounter = 0   
for line in f7:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(mccaincounter)
    addme = finddemons7(token)
    mccaincounter += addme
    print(mccaincounter)
    print(token)
    
    
    
    
    
    
    
    
    
    
    
#KellyanneConway:

f8=open("conway.txt", "rU").readlines()

def finddemons8(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
conwaycounter = 0   
for line in f8:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(conwaycounter)
    addme = finddemons8(token)
    conwaycounter += addme
    print(conwaycounter)
    print(token)
    
    
    
    
    
    
    
    
    
    
    
#MarcoRubio:

f9=open("rubio.txt", "rU").readlines()

def finddemons9(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
rubiocounter = 0   
for line in f9:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(rubiocounter)
    addme = finddemons9(token)
    rubiocounter += addme
    print(rubiocounter)
    print(token)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#RickPerry:

f10=open("rickperry.txt", "rU").readlines()

def finddemons10(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
perrycounter = 0   
for line in f10:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(perrycounter)
    addme = finddemons10(token)
    perrycounter += addme
    print(perrycounter)
    print(token)
    
    
    
    
    
    
    
    
    
    
#TedCruz:

f11=open("tedcruz.txt", "rU").readlines()

def finddemons11(variable):
    if len(variable) == 0:
        return 0
    else:    
        percpos = len([w for w in variable if w in poswords ]) / len(variable)
        percneg = -(len([w for w in variable if w in negwords ]) / len(variable))
        print("pos:", round(percpos, 3), "neg:", round(percneg, 3), "total:", round(percpos + percneg, 3))
        return percpos + percneg
    
cruzcounter = 0   
for line in f11:
    line = line.lower()
    print(line)
    token = nltk.word_tokenize(line)
    print(cruzcounter)
    addme = finddemons11(token)
    cruzcounter += addme
    print(cruzcounter)
    print(token)
    

    
    
#Do we want to take out the print(line) and the print(------counter) before the finddemons in all of the ? 
#These are checks for ourselves right?

#By the way, I think all of the finddemons can be the original. There's no need for the numbers. 
#Let me know if you agree. We can move all the open statements to the beginning as well if we want
#it to look more official. 
#Also, I added the function calls. #Without the numbers. 
    
finddemons(f)
finddemons(f2)
finddemons(f3)
finddemons(f4)
finddemons(f5)
finddemons(f6)
finddemons(f7)
finddemons(f8)
finddemons(f9)
finddemons(f10)
finddemons(f11)
    
    
    
    
    
    
#PRINT ALL TOTALS:    


#For this we need something that will print it all as one thingie, 
#because right now it prints each one of those with the result right below each one and looks funny.
#There shouldn't be any reason that they print right below each other

print("Paul Ryan's total: ", paulryancounter)
print()
print("Pence's Total: ", pencecounter)
print()
print("Trump's Total: ", trumpcounter)
print()
print("Sarah Palin's Total: ", palincounter)
print()
print("Ben Carson's Total: ", carsoncounter)
print()
print("Ivanka's Total: ", ivankacounter)
print()
print("John McCain's Total: ", mccaincounter)
print()
print("Kellyanne Conway's Total: ", conwaycounter)
print()
print("Marco Rubio's Total: ", rubiocounter)
print()
print("Rick Perry's Total: ", perrycounter)
print()
print("Ted Cruz's Total: ", cruzcounter)












